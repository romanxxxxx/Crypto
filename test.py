import os
import time
import hashlib
import tempfile
from CryptoCLI import CryptoCLI  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å –∫–ª–∞—Å—Å–æ–º –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è CryptoCLI.py

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ ---
def generate_test_file(size_mb: int) -> str:
    """–°–æ–∑–¥–∞—ë—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –ø—É—Ç—å"""
    fd, path = tempfile.mkstemp(suffix=f"_{size_mb}MB.bin")
    os.close(fd)

    chunk_size = 1024 * 1024  # 1 MB
    with open(path, 'wb') as f:
        for _ in range(size_mb):
            f.write(os.urandom(chunk_size))  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ñ–∞–π–ª {path} ({size_mb} –ú–ë)")
    return path

# --- –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö—ç—à–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
def calculate_sha256(file_path: str) -> str:
    """–í—ã—á–∏—Å–ª—è–µ—Ç SHA-256 —Ö—ç—à —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"""
    sha256 = hashlib.sha256()
    with open(file_path, 'rb') as f:
        while chunk := f.read(8192):
            sha256.update(chunk)
    return sha256.hexdigest()

# --- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ ---
def test_file_performance(size_mb: int, passphrase: str):
    input_path = generate_test_file(size_mb)
    encrypted_path = input_path + ".enc"
    decrypted_path = input_path + ".dec"

    original_hash = calculate_sha256(input_path)
    crypto = CryptoCLI(verbose=False)

    print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ {size_mb} –ú–ë...")

    # –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
    start = time.time()
    crypto.encrypt_file(input_path, encrypted_path, passphrase)
    encrypt_time = time.time() - start
    encrypt_speed = (size_mb * 8) / encrypt_time
    print(f"üîí –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –∑–∞ {encrypt_time:.2f} —Å–µ–∫ | {encrypt_speed:.2f} –ú–±–∏—Ç/—Å–µ–∫")

    # –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ
    start = time.time()
    crypto.decrypt_file(encrypted_path, decrypted_path, passphrase)
    decrypt_time = time.time() - start
    decrypt_speed = (size_mb * 8) / decrypt_time
    print(f"üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ –∑–∞ {decrypt_time:.2f} —Å–µ–∫ | {decrypt_speed:.2f} –ú–±–∏—Ç/—Å–µ–∫")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞
    decrypted_hash = calculate_sha256(decrypted_path)
    if decrypted_hash == original_hash:
        print("üü¢ –¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
    else:
        print("üî¥ –û—à–∏–±–∫–∞! –î–∞–Ω–Ω—ã–µ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω—ã!")

    # –û—á–∏—Å—Ç–∫–∞
    os.remove(input_path)
    os.remove(encrypted_path)
    os.remove(decrypted_path)

    return {
        "size": size_mb,
        "encrypt_time": encrypt_time,
        "encrypt_speed": encrypt_speed,
        "decrypt_time": decrypt_time,
        "decrypt_speed": decrypt_speed,
        "integrity_ok": (decrypted_hash == original_hash)
    }

# --- –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –Ω–∞ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö ---
def run_performance_tests():
    sizes = [1, 5, 10, 50, 100]  # –†–∞–∑–º–µ—Ä—ã –≤ –ú–ë
    passphrase = "my_strong_password_123"
    results = []

    print("\nüöÄ –ù–∞—á–∞–ª–æ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...\n")

    for size in sizes:
        result = test_file_performance(size, passphrase)
        results.append(result)

    # --- –í—ã–≤–æ–¥ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á—ë—Ç–∞ ---
    print("\nüìä –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
    print("-" * 70)
    print(f"{'–†–∞–∑–º–µ—Ä':<6} | {'–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ (—Å–µ–∫)':<15} | {'–°–∫–æ—Ä–æ—Å—Ç—å':<10} | "
          f"{'–†–∞—Å—à–∏—Ñ—Ä. (—Å–µ–∫)':<15} | {'–°–∫–æ—Ä–æ—Å—Ç—å':<10} | {'–¶–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å'}")
    print("-" * 70)

    for r in results:
        enc_speed = f"{r['encrypt_speed']:.2f}"
        dec_speed = f"{r['decrypt_speed']:.2f}"
        integrity = "OK" if r['integrity_ok'] else "–û—à–∏–±–∫–∞"
        print(f"{r['size']:<6} | {r['encrypt_time']:.2f}           | {enc_speed:<10} | "
              f"{r['decrypt_time']:.2f}           | {dec_speed:<10} | {integrity}")
    print("-" * 70)

if __name__ == "__main__":
    run_performance_tests()